<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      .invalid {
        border: 1px solid red;
      }
      .error-message {
        color: red;
        font-size: 14px;
        margin-top: 4px;
      }
      form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        max-width: 400px;
      }
      .form-group {
        display: flex;
        flex-direction: column;
      }
      .password-requirements {
        font-size: 12px;
        color: #666;
        margin-top: 4px;
      }
    </style>
  </head>
  <body>
    <h1><%= title %></h1>
    <form action="/sign-up" method="POST" novalidate>
      <div id="error-container"></div>

      <div class="form-group">
        <label for="firstName">First Name</label>
        <input
          id="firstName"
          name="firstName"
          type="text"
          placeholder="eg. Kea Meng"
          required
        />
        <div class="error-message" data-error="firstName"></div>
      </div>

      <div class="form-group">
        <label for="lastName">Last Name</label>
        <input id="lastName" name="lastName" type="text" required />
        <div class="error-message" data-error="lastName"></div>
      </div>

      <div class="form-group">
        <label for="username">Username</label>
        <input id="username" name="username" type="text" required />
        <div class="error-message" data-error="username"></div>
      </div>

      <div class="form-group">
        <label for="email">Email</label>
        <input id="email" name="email" type="email" required />
        <div class="error-message" data-error="email"></div>
      </div>

      <div class="form-group">
        <label for="password">Password</label>
        <input
          id="password"
          name="password"
          type="password"
          required
          pattern="^(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$"
        />
        <div class="error-message" data-error="password"></div>
      </div>

      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <input
          id="confirmPassword"
          name="confirmPassword"
          type="password"
          required
        />
        <div class="error-message" data-error="confirmPassword"></div>
      </div>

      <button type="submit">Sign Up</button>
    </form>

    <script>
      const form = document.querySelector("form");
      const inputs = form.querySelectorAll("input");
      const errorContainer = document.getElementById("error-container");
      const password = document.getElementById("password");
      const confirmPassword = document.getElementById("confirmPassword");

      // Validation messages
      const errorMessages = {
        valueMissing: (fieldName) => `${fieldName} is required`,
        typeMismatch: {
          email: "Please enter a valid email address",
        },
        patternMismatch: {
          password: `<ul style="margin: 4px 0; padding-left: 20px;">
    <li>At least 8 characters long</li>
    <li>At least one uppercase letter</li>
    <li>At least one number</li>
    <li>At least one special character (!@#$%^&*)</li>
  </ul>`,
        },
        passwordMismatch: "Passwords do not match",
      };

      // Handle input blur events
      inputs.forEach((input) => {
        input.addEventListener("blur", validateInput);
        input.addEventListener("input", () => {
          // Clear error when user starts typing
          if (input.classList.contains("invalid")) {
            clearError(input);
          }
          // Check password match on input
          if (input.id === "password" || input.id === "confirmPassword") {
            validatePasswordMatch();
          }
        });
      });

      // Handle form submission
      form.addEventListener("submit", (event) => {
        event.preventDefault();
        clearAllErrors();

        let isValid = true;
        inputs.forEach((input) => {
          if (!validateInput({ target: input })) {
            isValid = false;
          }
        });

        // Check password match
        if (!validatePasswordMatch()) {
          isValid = false;
        }

        if (isValid) {
          form.submit();
        }
      });

      function validateInput(event) {
        const input = event.target;
        const isValid = input.checkValidity();

        if (isValid) {
          clearError(input);
          return true;
        } else {
          showInputError(input);
          return false;
        }
      }

      function validatePasswordMatch() {
        if (password.value && confirmPassword.value) {
          if (password.value !== confirmPassword.value) {
            confirmPassword.classList.add("invalid");
            const errorElement = confirmPassword.parentElement.querySelector(
              '[data-error="confirmPassword"]'
            );
            errorElement.textContent = errorMessages.passwordMismatch;
            return false;
          } else {
            clearError(confirmPassword);
            return true;
          }
        }
        return true;
      }

      function showInputError(input) {
        input.classList.add("invalid");
        const errorElement = input.parentElement.querySelector(
          `[data-error="${input.id}"]`
        );

        if (input.validity.valueMissing) {
          errorElement.textContent = errorMessages.valueMissing(
            input.previousElementSibling.textContent
          );
        } else if (input.validity.typeMismatch) {
          errorElement.textContent = errorMessages.typeMismatch[input.type];
        } else if (input.validity.patternMismatch) {
          errorElement.innerHTML = errorMessages.patternMismatch[input.type];
        }
      }

      function clearError(input) {
        input.classList.remove("invalid");
        const errorElement = input.parentElement.querySelector(
          `[data-error="${input.id}"]`
        );
        errorElement.textContent = "";
      }

      function clearAllErrors() {
        errorContainer.textContent = "";
        inputs.forEach((input) => {
          clearError(input);
        });
      }

      function showError(message) {
        errorContainer.textContent = message;
      }
    </script>
  </body>
</html>
